---
layout: default
title: Rails Girls App Tutorial
permalink: app
---

# Rails Girls App Tutorial

*Erstellt von Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

*Übersetzt von den Rails Girls Hamburg, [@railsgirlshh](https://twitter.com/railsgirlshh)*

**Installiere Rails mit Hilfe der [Installationsanleitung](/install).**


## Lern Deine Werkzeuge kennen

<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>

### Texteditor

* [Atom](https://atom.io/), [Sublime Text](http://www.sublimetext.com),  Vim und Emacs sind Texteditoren. Du kannst sie verwenden, um Code zu schreiben und Dateien zu bearbeiten.

<h3><i class="icon-prompt">&nbsp;</i></h3>

### Terminal (auch genannt Eingabeaufforderung oder Command Prompt)

* Hier startest Du den Railsserver und führst Befehle aus.

<h3><i class="icon-browser">&nbsp;</i></h3>

### Webbrowser

* Firefox, Safari und Chrome sind Webbrowser, mit denen Du Deine Anwendung ansehen kannst.

</div>

### Wichtig

Befolge jeweils die Anleitungen für Dein Betriebssystem. Die Befehle für Windows unterscheiden sich von denen für Mac oder Linux. Solltest Du Probleme haben, überprüfe den Betriebssystemumschalter unterhalb der Befehle. Falls Du einen Cloudservice wie z.B. nitrous verwendest, so solltest Du die Linuxbefehle verwenden, auch wenn Du einen Windowscomputer benutzt.

## *1.*Eine neue Anwendung erzeugen

Wir erzeugen nun eine neue Railsanwendung namens *railsgirls*.

Dazu öffnen wir das Terminal:

* Mac OS X: Öffne Spotlight, tippe *Terminal* ein und klick die Anwendung *Terminal* an.
* Windows: Klick auf Start und halte nach *Eingabeaufforderung* Ausschau, dann klick *Eingabeaufforderung mit Ruby on Rails* bzw. *Command Prompt with Ruby on Rails* an.
* Linux (Ubuntu/Fedora): Suche im Dash nach *Terminal* und klick *Terminal* an.
* Cloudservice (z.B. nitrous): Melde Dich an Deinem Account an, starte Deine Box und wechsel in die Entwicklungsumgebung IDE (siehe [Installationsanleitung](/install#using-a-cloud-service)). Das Terminal befindet sich normalerweise im unteren Bereich des Browserfensters.

Gib jetzt folgende Befehle in das Terminal ein:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
<p>Du kannst nachprüfen, dass ein Verzeichnis namens <code>projects</code> angelegt wurde, indem Du den Befehl <code>ls</code> aufrufst. In der Ausgabe solltest Du das Verzeichnis <code>projects</code> sehen. Wechsel jetzt in das Verzeichnis <code>projects</code>, indem Du folgendes aufrufst:</p>
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
<p>Um nachzuprüfen, dass Du Dich in einem leeren Verzeichnis befindest, kannst Du erneut <code>ls</code> aufrufen. Jetzt kannst Du eine neue Railsanwendung names <code>railsgirls</code> erzeugen, indem Du folgenden Befehl ausführst:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>Dadurch wird eine neue Anwendung im Verzeichnis <code>railsgirls</code> angelegt. Wechsel nun in dieses Verzeichnis:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>Wenn Du nun in diesem Verzeichnis <code>ls</code> aufrufst, siehst Du Verzeichnisse wie <code>app</code> und <code>config</code>. Du kannst den Railsserver wie folgt starten:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
<p>Du kannst nachprüfen, dass ein Ordner namens <code>projects</code> angelegt wurde, indem Du den Befehl <code>dir</code> aufrufst. In der Ausgabe solltest Du den Ordner <code>projects</code> sehen. Wechsel jetzt in den Ordner <code>projects</code>, indem Du folgendes aufrufst:</p>
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
<p>Um nachzuprüfen, dass Du Dich in einem leeren Verzeichnis befindest, kannst Du erneut <code>dir</code> aufrufen. Jetzt kannst Du eine neue Railsanwendung names <code>railsgirls</code> erzeugen, indem Du folgenden Befehl ausführst:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>Dadurch wird eine neue Anwendung im Ordner <code>railsgirls</code> angelegt. Wechsel nun in diesen Ordner:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>Wenn Du nun in diesem Ordner <code>dir</code> aufrufst, siehst Du Ordner wie <code>app</code> und <code>config</code>. Du kannst den Railsserver wie folgt starten:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>
</div>

Öffne nun <http://localhost:3000> in Deinem Browser. Wenn Du einen Cloudservice benutzt (z.B. nitrous), verwende stattdessen die Vorschaufunktion (siehe [Installationsanleitung](/install#using-a-cloud-service)).

Wenn die Erzeugung Deiner neuen Anwendung korrekt funktioniert hat, siehst du nun eine "Welcome aboard" Seite.

Beachte, dass in diesem Fenster keine Eingabeaufforderung zu sehen ist. Da Du Dich im Railsserver befindest, sieht das Ganze so aus:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
$
{% endhighlight %}
  </div>
  <div class="win">
{% highlight sh %}
>
{% endhighlight %}
  </div>
</div>

Wenn die Eingabeaufforderung nicht zu sehen ist, kannst Du keine Befehle ausführen. Befehle wie `cd` werden nicht funktionieren. Du kannst aber zur Eingabeaufforderung zurückkehren:

Gib `STRG-C` im Terminal ein, um den Railsserver zu beenden.

**Coach:** Erläutere die einzelnen Befehle. Was wurde erzeugt? Was macht der Server?

## *2.*Idea Scaffold erzeugen

Wie benutzen die Scaffold-Funktion von Rails, um einen ersten Baustein für unsere Anwendung zu erstellen. Dadurch bekommen wir eine Ausgangsbasis, die uns das Auflisten, Hinzufügen, Entfernen, Bearbeiten und Betrachten von Dingen gestattet - in userem Fall, von Ideen (ideas).

**Coach:** Was ist Rails Scaffolding? (Erläutere den Befehl, den Namen des Models und der entsprechenden Datenbanktabelle, Namenskonventionen, Attribute und Typen, usw.) Was sind Migrationen, und wofür brauchen wir sie?

{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}

Der Scaffold erzeugt neue Dateien in Deinem Projektverzeichnis, aber damit alles korrekt funktioniert, ist die Ausführung weiterer Befehle erforderlich - um die Datenbank zu aktualisieren und den Railsserver neu zu starten.

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
bin/rake db:migrate
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
ruby bin/rake db:migrate
rails server
{% endhighlight %}
  </div>
</div>

Öffne <http://localhost:3000/ideas> in Deinem Browser. Wenn Du einen Cloudservice (z.B. nitrous) verwendest, hänge stattdessen '/ideas' an die Vorschau-URL an (siehe [Installationsanleitung](/install#using-a-cloud-service)).

Klick ein wenig herum, um Deine Anwendung zu testen.

Gib anschliessend `STRG-C` ins Terminal ein, um den Railsserver zu beenden.


## *3.*Design

**Coach:** Erläutere das Verhältnis zwischen HTML und Rails. Welche Teile eines Views sind HTML, und welche sind Embedded Ruby (ERB)? Was ist MVC, und was hat das miteinander zu tun? (Models und Controllers sind dafür zuständig, die HTML Ansichten zu erzeugen.)

Die Anwendung sieht noch nicht sehr gut aus. Das können wir ändern! Wir benutzen das Twitter Bootstrap Projekt, um auf einfache Weise eine besseres Aussehen hinzubekommen.

Öffne `app/views/layouts/application.html.erb` in Deinem Texteditor, und oberhalb von

{% highlight erb %}
<%= stylesheet_link_tag "application", media: "all", "data-turbolinks-track" => true %>
{% endhighlight %}

füge

{% highlight erb %}
<link rel="stylesheet" href="//railsgirls.com/assets/bootstrap.css">
<link rel="stylesheet" href="//railsgirls.com/assets/bootstrap-theme.css">
{% endhighlight %}

hinzu und ersetze

{% highlight erb %}
<%= yield %>
{% endhighlight %}

durch

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

Wir können dem Layout jetzt einen Navigationsbereich und eine Fußzeile hinzufügen. In derselben Datei, füge unterhalb von `<body>` folgendes ein:

{% highlight html %}
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">The Idea app</a>
    </div>
    <div class="collapse navbar-collapse">
      <ul class="nav navbar-nav">
        <li class="active"><a href="/ideas">Ideas</a></li>
      </ul>
    </div>
  </div>
</nav>
{% endhighlight %}

Vor `</body>` solltest Du folgendes ergänzen:

{% highlight html %}
<footer>
  <div class="container">
    Rails Girls 2015
  </div>
</footer>
<script src="//railsgirls.com/assets/bootstrap.js"></script>
{% endhighlight %}

Jetzt können wir auch das Aussehen der Ideentabelle ändern. Öffne `app/assets/stylesheets/application.css` und füge folgendes am Ende hinzu:

{% highlight css %}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle; border: none; }
th { border-bottom: 1px solid #DDD; }
{% endhighlight %}

Speichere die Dateien und lade die Seite im Browser neu, um Deine Änderungen zu sehen. Du kannst auch weitere Veränderungen an HTML & CSS vornehmen.

Falls in Deinem Terminal eine Fehlermeldung erscheint, die etwas mit JavaScript oder CoffeeScript zu tun hat, installiere [nodejs](http://nodejs.org/download/). Das Problem sollte nicht auftreten, wenn Du den RailsInstaller verwendet hast (sondern wenn Du Rails via ```gem install rails``` installiert hast).

**Coach:** Sprich ein wenig über CSS und Layouts.


## *4.*Bilder hochladen

Wir benötigen weitere Software, um das Hochladen von Dateien in Rails zu ermöglichen.

 Öffne die Datei `Gemfile` aus Deinem Projektverzeichnis im Texteditor. Unterhalb der Zeile

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

ergänze

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**Coach:** Erläutere, was Bibliotheken sind und warum sie nützlich sind. Erkläre was Open Source Software ist.

Führe folgenden Befehl im Terminal aus:

{% highlight sh %}
bundle
{% endhighlight %}

Jetzt können wir den Code zum Hochladen von Dateien erzeugen. Führe folgendes im Terminal aus:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

Du musst nun den Railsserver neu starten.

Gib `STRG-C` ins Terminal ein, um den Railsserver zu beenden. Wenn er angehalten wurde, kannst Du mit der Cursortaste (Pfeil nach oben) den zuletzt eingegebenen Befehl zurückholen und mit Enter ausführen, um den Server erneut zu starten.

Dies ist notwendig, damit die Anwendung die neu hinzugefügte Bibliothek lädt.

Öffne `app/models/idea.rb` und unterhalb der Zeile

{% highlight ruby %}
class Idea < ActiveRecord::Base
{% endhighlight %}

ergänze

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

Öffne `app/views/ideas/_form.html.erb` und ändere

{% highlight erb %}
<%= f.text_field :picture %>
{% endhighlight %}

in

{% highlight erb %}
<%= f.file_field :picture %>
{% endhighlight %}

Unter Umständen bekommst Du eine Fehlermeldung wie *TypeError: can't cast ActionDispatch::Http::UploadedFile to string*.

In dem Fall solltest Du in der Datei `app/views/ideas/_form.html.erb` die Zeile

{% highlight erb %}
<%= form_for(@idea) do |f| %>
{% endhighlight %}

in

{% highlight erb %}
<%= form_for @idea, :html => {:multipart => true} do |f| %>
{% endhighlight %}

ändern.

Im Browser kannst du nun eine neue Idee mit Bild anlegen. Wenn Du ein Bild hochlädst, siehst Du aber nur den Pfad zur Bilddatei.

Um dies zu ändern, öffne `app/views/ideas/show.html.erb` und ändere

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

in

{% highlight erb %}
<%= image_tag(@idea.picture_url, :width => 600) if @idea.picture.present? %>
{% endhighlight %}

Aktualisiere die Ansicht im Browser, um die Änderungen zu sehen.

**Coach:** Erzähl etwas über HTML.


## *5.*Routen anpassen

Öffne <http://localhost:3000> (oder die Vorschau-URL, falls Du einen Cloudservice verwendest). Du siehst immer noch die "Welcome aboard" Seite. Stattdessen veranlassen wir nun eine Weiterleitung zur Ideenseite.

Öffne `config/routes.rb` und füge nach der ersten Zeile folgendes ein:

{% highlight ruby %}
root :to => redirect('/ideas')
{% endhighlight %}

Teste die Änderungen, in dem Du  <http://localhost:3000/> bzw. Deine Vorschau-URL im Browser öffnest.

**Coach:** Sprich über Routen, ihre Reihenfolge und die Beziehung zu statischen Dateien.

**Rails 3:** Damit dies funktioniert, musst Du die Datei index.html aus dem Verzeichnis `/public/` entfernen.

## Lege eine statische Seite in Deiner Anwendung an

Lass uns eine statische Seite anlegen, die Informationen über die Verfasserin der Anwendung bereitstellt - also über Dich!

{% highlight sh %}
rails generate controller pages info
{% endhighlight %}

Dieser Befehl legt ein neues Verzeichnis unterhalb von `app/views` an. In dem neuen Verzeichnis namens `/pages` wird eine neue Datei `info.html.erb` angelegt, aus der nun Deine Infoseite wird.

Der Befehl erzeugt auch eine simple Route in Deiner routes.rb:

{% highlight ruby %}
get "pages/info"
{% endhighlight %}

Du kannst nun `app/views/pages/info.html.erb` im Texteditor öffnen und Informationen über Dich in HTML hinzufügen. Um die neue Infoseite zu sehen, öffne im Brower  <http://localhost:3000/pages/info> oder hänge '/pages/info' an Deine Vorschau-URL an, falls Du einen Cloudservice verwendest.

## *6+.*Was nun?

* Design mit HTML &amp; CSS
* Bewertungen
* Mehr Interaktionsmöglichkeiten mit CoffeeScript (oder JavaScript)
* Größenanpassung für Bilder, um das Laden der Bilder zu beschleunigen


## Weitere Anleitungen (auf Englisch)

* Guide 0: [Handy cheatsheet for Ruby, Rails, console etc.](https://github.com/PragTob/rails-beginner-cheatsheet)
* Guide 1: [Add commenting by Janika Liiv](/commenting)
* Guide 2: [Put your app online with Heroku by Terence Lee](/heroku) / [Put your app online with OpenShift by Katie Miller](/openshift) / [Put your app online with Ninefold](/ninefold) / [Put your app online with Shelly Cloud](/shellycloud) / [Put your app online with anynines](/anynines) / [Put your app online with Trucker.io](/trucker)
* Guide 3: [Create thumbnail images for the uploads by Miha Filej](/thumbnails)
* Guide 4: [Add design using HTML &amp; CSS by Alex Liao](/design)
* Guide 5: [Add Authentication (user accounts) with Devise by Piotr Steininger](/devise/)
* Guide 6: [Adding profile pictures with Gravatar](/gravatar)
* Guide 7: [Test your app with RSpec](/testing-rspec)
* Guide 8: [Continuous Deployment with Travis-CI](/continuous-travis) / [Continuous Deployment with Codeship](/continuous)
* Guide 9: [Go through additional explanations for the App by Lucy Bain](https://github.com/lbain/railsgirls)
